#include <vector>
#include <iostream>
#include <string>
#include <limits.h>
class Person
{
protected:
	std::string Name{};
	std::string SurName{};
	int Age{};
public:
	Person() = default;
	Person(const Person& p) = default;
	Person(std::string name, std::string surname, int age) : Name(name), SurName(surname), Age(age) {}
	~Person() {}
};
class Employee : Person
{
protected:
	int salary;
public:
	Employee() = default;
	Employee(const Employee& p) = default;
	Employee(std::string name, std::string surname, int Age, int s) : Person(name, surname, Age), salary(s) {}
	~Employee() {}
	std::string GetSName() {
		return SurName;
	}
	int GetSlary() {
		return salary;
	}
	int GetAge() {
		return Age;
	}
};
int main()
{
	int n{};
	int testik = 0;
	std::vector<std::string> test{};
	bool check = false;
	unsigned int Sal = INT_MAX;
	int Year = 0;
	std::cin >> n;
	std::vector<Employee> Per{};
	for (size_t i = 0; i < n; i++)
	{
		std::string Name{};
		std::string Surname{};
		int Age{};
		int salary{};
		std::cin >> Name >> Surname;
		std::cin >> Age >> salary;
		Per.push_back(Employee(Name, Surname, Age, salary));
		if (Per[i].GetAge() >= Year)
		{
			Year = Per[i].GetAge();
		}
	}
	for (size_t i = 0; i < Per.size(); i++)
	{
		if (Per[i].GetSlary() < Sal && Per[i].GetAge() == Year)
		{
			Sal = Per[i].GetSlary();
		}
		if (Per[i].GetSlary() == Sal && Per[i].GetAge() == Year)
		{
			test.push_back(Per[i].GetSName());
		}
	}
	if (test.size() < 2)
	{
		std::cout << "Not found!";
	}
	else
	{
		for (size_t i = 0; i < test.size(); i++)
		{
			std::cout << test[i] << "\n";
		}
	}
}