#include <iostream> 
#include <limits.h>
int main()
{
    int size = 0;
    std::cin >> size;
    int* arr = new int[size];
    int min = INT_MIN;
    int min1 = INT_MIN;
    int mid{};
    int max = INT_MAX;
    int max1 = INT_MAX;
    bool minimum = false;
    bool medium = false;
    bool maximum = false;
    bool test = false;
    for (int i = 0; i < size; i++) {
        std::cin >> arr[i];
    }
    for (int i = 0; i < size; i++) {
        if (arr[i] < 0)
            minimum = true;
        else if (arr[i] == 0)
        {
            medium = true;
        }
        else if (arr[i] > 0)
        {
            maximum = true;
        }
    }
    if (minimum == true && medium == true && maximum == true)
    {
        for (int i = 0; i < size; i++)
        {
            if (arr[i] > min && arr[i] < 0)
                min = arr[i];
            else if (arr[i] < max && arr[i] > 0)
                max = arr[i];
            else if (arr[i] == 0)
                mid = arr[i];
        }
        for (int k = 0; k < INT_MAX; k++)
        {
            if (mid + k == max)
            {
                std::cout << mid << " " << max;
                break;
            }
            else if (mid - k == min)
            {
                std::cout << mid << " " << min;
                break;
            }
            else {
                std::cout << mid << " " << max;
                break;
            }
        }
    }
    else if (minimum == true && medium == false && maximum == false)
    {
        for (int i = 0; i < size; i++)
        {
            if (arr[i] > min && arr[i] < 0) {
                min = arr[i];
            }
            else if (min > min1 && arr[i] > min1 && arr[i] < 0)
            {
                min1 = arr[i];
            }
        }
        std::cout << min << " " << min1;
    }
    else if (minimum == false && medium == false && maximum == true)
    {
        for (int i = 0; i < size; i++)
        {
            if (arr[i] < max && arr[i] > 0) {
                max = arr[i];
            }
            else if (max < max1 && arr[i] < max1 && arr[i] > 0)
            {
                max1 = arr[i];
            }
        }
        std::cout << max << " " << max1;
    }
    else if (minimum == false && medium == true && maximum == true)
    {
        for (int i = 0; i < size; i++)
        {
            if (arr[i] < max && arr[i] > 0) {
                max = arr[i];
            }
            else if (arr[i] == 0)
                mid = arr[i];
        }
        std::cout << mid << " " << max;
    }
    else if (minimum == true && medium == true && maximum == false)
    {
        for (int i = 0; i < size; i++)
        {
            if (arr[i] > min && arr[i] < 0) {
                min = arr[i];
            }
            else if (arr[i] == 0)
                mid = arr[i];
        }
        std::cout << mid << " " << min;
    }
    else if (minimum == true && medium == false && maximum == true)
    {
        for (int m = 0; m < INT_MAX; m++)
        {
            if (test == true)
                break;
            for (int k = 0; k < size; k++)
            {
                if (arr[k] < 0)
                {
                    for (int n = 0; n < size; n++)
                    {
                        if (arr[n] > 0)
                        {
                            if (arr[k] + arr[n] == m || arr[k] + arr[n] == 0 - m)
                            {
                                if (arr[k] == -100 && arr[n] == 100) {
                                    std::cout << arr[k] << " " << arr[n];
                                }
                                else
                                {
                                    std::cout << arr[n] << " " << arr[k];
                                }
                                test = true;
                            }
                        }
                    }
                }
            }
        }
    }
}